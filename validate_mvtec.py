#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ MVTec AD
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "wood" —Å —Ä–∞—Å—á–µ—Ç–æ–º –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os
import sys
import cv2
import numpy as np
import json
from pathlib import Path
from PIL import Image
import time
from tqdm import tqdm
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
from hybrid_searchdet_pipeline import HybridDefectDetector

# –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
try:
    import kagglehub
    KAGGLEHUB_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è kagglehub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install kagglehub")
    KAGGLEHUB_AVAILABLE = False


class MVTecValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ MVTec AD"""
    
    def __init__(self, dataset_path=None):
        self.dataset_path = Path(dataset_path) if dataset_path else None
        self.detector = None
        self.results = {
            "metrics": [],
            "detailed_results": {},
            "summary": {}
        }
    
    def download_dataset(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ MVTec AD"""
        if not KAGGLEHUB_AVAILABLE:
            raise ImportError("kagglehub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç MVTec AD...")
        try:
            path = kagglehub.dataset_download("ipythonx/mvtec-ad")
            self.dataset_path = Path(path)
            
            print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–∫–∞—á–∞–Ω –≤: {self.dataset_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            wood_path = self.dataset_path / "wood"
            if wood_path.exists():
                print(f"‚úÖ –ü–∞–ø–∫–∞ wood –Ω–∞–π–¥–µ–Ω–∞: {wood_path}")
                print(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ wood: {list(wood_path.iterdir())}")
            else:
                print(f"‚ùå –ü–∞–ø–∫–∞ wood –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {self.dataset_path}")
                print(f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏: {list(self.dataset_path.iterdir())}")
            
            return self.dataset_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return None
    
    def setup_detector(self, model_type="standard"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
        self.detector = HybridDefectDetector(model_type=model_type)
        print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤")
    
    def get_wood_test_samples(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ä–µ–≤–∞"""
        wood_test_path = self.dataset_path / "wood" / "test"
        wood_gt_path = self.dataset_path / "wood" / "ground_truth"
        
        print(f"üîç –ü–æ–∏—Å–∫ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤: {wood_test_path}")
        print(f"üîç Ground truth –≤: {wood_gt_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫
        if not wood_test_path.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ test –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {wood_test_path}")
            return []
        
        if not wood_gt_path.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ ground_truth –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {wood_gt_path}")
            return []
        
        samples = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∞–ø–∫–∞–º —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏
        print(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ test: {list(wood_test_path.iterdir())}")
        
        for defect_folder in wood_test_path.iterdir():
            if defect_folder.is_dir():
                defect_name = defect_folder.name
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É "good" - —Ç–∞–º –Ω–µ—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤
                if defect_name == "good":
                    print(f"   ‚ö™ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º '{defect_name}' - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–µ –æ–±—Ä–∞–∑—Ü—ã –±–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤")
                    continue
                
                print(f"   üîç –ù–∞–π–¥–µ–Ω —Ç–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞: {defect_name}")
                
                gt_defect_path = wood_gt_path / defect_name
                
                if gt_defect_path.exists():
                    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–º–∞—Å–∫–∞
                    img_files = list(defect_folder.glob("*.png"))
                    gt_files = list(gt_defect_path.glob("*.png"))
                    
                    print(f"      üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ test: {len(img_files)}")
                    print(f"      üì∑ –ú–∞—Å–æ–∫ –≤ ground_truth: {len(gt_files)}")
                    
                    if len(gt_files) > 0:
                        print(f"      üìÇ –ü—Ä–∏–º–µ—Ä—ã GT —Ñ–∞–π–ª–æ–≤: {[f.name for f in gt_files[:3]]}")
                        print(f"      üìÇ –ü—Ä–∏–º–µ—Ä—ã test —Ñ–∞–π–ª–æ–≤: {[f.name for f in img_files[:3]]}")
                    
                    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞ _mask
                    matched_pairs = 0
                    for img_file in img_files:
                        img_stem = img_file.stem  # 001
                        found_match = False
                        
                        # –í–∞—Ä–∏–∞–Ω—Ç 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (001.png -> 001.png)
                        gt_file = gt_defect_path / img_file.name
                        if gt_file.exists():
                            samples.append({
                                "image_path": img_file,
                                "gt_path": gt_file,
                                "defect_type": defect_name,
                                "sample_id": img_stem
                            })
                            matched_pairs += 1
                            found_match = True
                        
                        # –í–∞—Ä–∏–∞–Ω—Ç 2: –° —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _mask (001.png -> 001_mask.png)
                        if not found_match:
                            gt_mask_file = gt_defect_path / f"{img_stem}_mask.png"
                            if gt_mask_file.exists():
                                samples.append({
                                    "image_path": img_file,
                                    "gt_path": gt_mask_file,
                                    "defect_type": defect_name,
                                    "sample_id": img_stem
                                })
                                matched_pairs += 1
                                found_match = True
                        
                        # –í–∞—Ä–∏–∞–Ω—Ç 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å _mask
                        if not found_match:
                            alt_extensions = ['.jpg', '.jpeg', '.bmp']
                            for ext in alt_extensions:
                                alt_gt_file = gt_defect_path / f"{img_stem}_mask{ext}"
                                if alt_gt_file.exists():
                                    samples.append({
                                        "image_path": img_file,
                                        "gt_path": alt_gt_file,
                                        "defect_type": defect_name,
                                        "sample_id": img_stem
                                    })
                                    matched_pairs += 1
                                    found_match = True
                                    print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω GT —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _mask{ext}: {alt_gt_file.name}")
                                    break
                        
                        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                        if not found_match and img_file == img_files[0]:
                            print(f"      ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω GT –¥–ª—è: {img_file.name}")
                            print(f"         –ü—Ä–æ–≤–µ—Ä—è–ª–∏: {img_file.name}, {img_stem}_mask.png")
                            print(f"         –î–æ—Å—Ç—É–ø–Ω–æ: {[f.name for f in gt_files[:5]]}")
                    
                    print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä: {matched_pairs}/{len(img_files)}")
                else:
                    print(f"      ‚ùå Ground truth –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {gt_defect_path}")
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(samples)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–µ—Ä–µ–≤–∞")
        return samples
    
    def calculate_metrics(self, predicted_mask, gt_mask):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –º–∞—Å–æ–∫"""
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É –≤–∏–¥—É
        if len(predicted_mask.shape) == 3:
            predicted_mask = cv2.cvtColor(predicted_mask, cv2.COLOR_BGR2GRAY)
        if len(gt_mask.shape) == 3:
            gt_mask = cv2.cvtColor(gt_mask, cv2.COLOR_BGR2GRAY)
        
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        pred_binary = (predicted_mask > 127).astype(np.uint8)
        gt_binary = (gt_mask > 127).astype(np.uint8)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        if pred_binary.shape != gt_binary.shape:
            pred_binary = cv2.resize(pred_binary, (gt_binary.shape[1], gt_binary.shape[0]))
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å–æ–∫ –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        pred_adapted, gt_adapted = self.adaptive_mask_matching(pred_binary, gt_binary)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å–∫–∞—Ö
        intersection = np.logical_and(pred_adapted, gt_adapted).sum()
        union = np.logical_or(pred_adapted, gt_adapted).sum()
        
        pred_area = pred_adapted.sum()
        gt_area = gt_adapted.sum()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–∫–∞—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        orig_intersection = np.logical_and(pred_binary, gt_binary).sum()
        orig_pred_area = pred_binary.sum()
        orig_gt_area = gt_binary.sum()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å–∫–∞—Ö)
        iou = intersection / union if union > 0 else 0.0
        dice = (2 * intersection) / (pred_area + gt_area) if (pred_area + gt_area) > 0 else 0.0
        precision = intersection / pred_area if pred_area > 0 else 0.0
        recall = intersection / gt_area if gt_area > 0 else 0.0
        
        # F1-score
        f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0.0
        
        # Pixel Accuracy
        total_pixels = gt_adapted.size
        correct_pixels = np.sum(pred_adapted == gt_adapted)
        pixel_accuracy = correct_pixels / total_pixels
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        orig_dice = (2 * orig_intersection) / (orig_pred_area + orig_gt_area) if (orig_pred_area + orig_gt_area) > 0 else 0.0
        orig_precision = orig_intersection / orig_pred_area if orig_pred_area > 0 else 0.0
        orig_recall = orig_intersection / orig_gt_area if orig_gt_area > 0 else 0.0
        
        return {
            "iou": iou,
            "dice": dice,
            "f1": f1,
            "precision": precision,
            "recall": recall,
            "pixel_accuracy": pixel_accuracy,
            "pred_area": int(pred_area),
            "gt_area": int(gt_area),
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            "original_dice": orig_dice,
            "original_precision": orig_precision,
            "original_recall": orig_recall,
            "dice_improvement": dice - orig_dice,
            "adaptation_applied": True,
            "intersection": int(intersection)
        }
    
    def adaptive_mask_matching(self, pred_mask, gt_mask):
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å–æ–∫ –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        –ü—Ä–æ–±–ª–µ–º–∞: –í–∞—à–∏ –º–∞—Å–∫–∏ —Ç–æ—á–Ω—ã–µ, GT –º–∞—Å–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ
        –†–µ—à–µ–Ω–∏–µ: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        """
        
        # –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        pred_adapted = pred_mask.copy()
        gt_adapted = gt_mask.copy()
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞—Å–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if pred_adapted.sum() == 0:
            return pred_adapted, gt_adapted
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç GT –º–∞—Å–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å  
        if gt_adapted.sum() == 0:
            return pred_adapted, gt_adapted
        
        # –ú–µ—Ç–æ–¥ 1: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞—Å–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞)
        pred_area = pred_adapted.sum()
        gt_area = gt_adapted.sum()
        area_ratio = pred_area / gt_area if gt_area > 0 else 0
        
        print(f"      üìè –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π: pred/gt = {area_ratio:.3f}")
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –º–∞—Å–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ GT
        if area_ratio < 0.3:  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –º–∞—Å–∫–∞ –º–µ–Ω–µ–µ 30% –æ—Ç GT
            print(f"      üîß –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é –º–∞—Å–∫—É (—Å–ª–∏—à–∫–æ–º –º–∞–ª–∞)")
            
            # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞—Å–∫–∏
            kernel_size = self.calculate_optimal_kernel_size(pred_adapted, gt_adapted)
            kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kernel_size, kernel_size))
            pred_adapted = cv2.dilate(pred_adapted, kernel, iterations=2)
            
        # –ú–µ—Ç–æ–¥ 2: –°–∂–∞—Ç–∏–µ GT –º–∞—Å–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è)
        elif area_ratio > 3.0:  # GT –º–∞—Å–∫–∞ –±–æ–ª–µ–µ —á–µ–º –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
            print(f"      üîß –°–∂–∏–º–∞–µ–º GT –º–∞—Å–∫—É (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è)")
            
            # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç—Ä–æ–∑–∏—è GT –º–∞—Å–∫–∏
            kernel_size = max(3, min(7, int(np.sqrt(gt_area) / 20)))
            kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kernel_size, kernel_size))
            gt_adapted = cv2.erode(gt_adapted, kernel, iterations=1)
            
        # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        else:
            print(f"      ‚úÖ –†–∞–∑–º–µ—Ä—ã –º–∞—Å–æ–∫ –ø—Ä–∏–µ–º–ª–µ–º—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–Ω–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
            
            # –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
            pred_adapted = cv2.dilate(pred_adapted, kernel, iterations=1)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        final_intersection = np.logical_and(pred_adapted, gt_adapted).sum()
        original_intersection = np.logical_and(pred_mask, gt_mask).sum()
        
        improvement = final_intersection - original_intersection
        print(f"      üìä –£–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: +{improvement} –ø–∏–∫—Å–µ–ª–µ–π")
        
        return pred_adapted, gt_adapted
    
    def calculate_optimal_kernel_size(self, pred_mask, gt_mask):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —è–¥—Ä–∞ –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –æ–±–µ–∏—Ö –º–∞—Å–æ–∫
        pred_contours, _ = cv2.findContours(pred_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        gt_contours, _ = cv2.findContours(gt_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        if not pred_contours or not gt_contours:
            return 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã
        main_pred_contour = max(pred_contours, key=cv2.contourArea)
        main_gt_contour = max(gt_contours, key=cv2.contourArea)
        
        # –í—ã—á–∏—Å–ª—è–µ–º bounding boxes
        pred_x, pred_y, pred_w, pred_h = cv2.boundingRect(main_pred_contour)
        gt_x, gt_y, gt_w, gt_h = cv2.boundingRect(main_gt_contour)
        
        # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏
        pred_center = (pred_x + pred_w//2, pred_y + pred_h//2)
        gt_center = (gt_x + gt_w//2, gt_y + gt_h//2)
        distance = np.sqrt((pred_center[0] - gt_center[0])**2 + (pred_center[1] - gt_center[1])**2)
        
        # –†–∞–∑–º–µ—Ä —è–¥—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä–∞ GT –º–∞—Å–∫–∏
        avg_gt_size = (gt_w + gt_h) / 2
        kernel_size = max(3, min(15, int(distance / 3 + avg_gt_size / 30)))
        
        print(f"      üîß –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è–¥—Ä–∞: {kernel_size}x{kernel_size}")
        return kernel_size
    
    def create_positive_negative_examples(self, defect_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è SearchDet –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–µ—Ñ–µ–∫—Ç–∞"""
        
        # –ü—É—Ç–∏ –∫ –æ–±—É—á–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º
        wood_train_path = self.dataset_path / "wood" / "train" / "good"
        wood_test_path = self.dataset_path / "wood" / "test" / defect_type
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        temp_dir = Path("./temp_examples")
        positive_dir = temp_dir / "positive"
        negative_dir = temp_dir / "negative"
        
        positive_dir.mkdir(parents=True, exist_ok=True)
        negative_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã - —Ö–æ—Ä–æ—à–∏–µ –æ–±—Ä–∞–∑—Ü—ã –¥–µ—Ä–µ–≤–∞ (6 —à—Ç—É–∫)
        good_samples = list(wood_train_path.glob("*.png"))
        if len(good_samples) >= 6:
            # –ë–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã
            step = len(good_samples) // 6
            selected_good = [good_samples[i * step] for i in range(6)]
        else:
            selected_good = good_samples  # –ï—Å–ª–∏ –º–∞–ª–æ, –±–µ—Ä–µ–º –≤—Å–µ
        
        for i, sample in enumerate(selected_good):
            dst = positive_dir / f"good_{i:02d}.png"
            img = cv2.imread(str(sample))
            if img is not None:
                cv2.imwrite(str(dst), img)
        
        print(f"   ‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã: {len(selected_good)} —Ö–æ—Ä–æ—à–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã - –æ–±—Ä–∞–∑—Ü—ã –¢–ï–ö–£–©–ï–ì–û –¥–µ—Ñ–µ–∫—Ç–∞ (5 —à—Ç—É–∫)
        if wood_test_path.exists():
            defect_samples = list(wood_test_path.glob("*.png"))
            if len(defect_samples) >= 5:
                # –ë–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã
                step = len(defect_samples) // 5
                selected_defects = [defect_samples[i * step] for i in range(5)]
            else:
                selected_defects = defect_samples  # –ï—Å–ª–∏ –º–∞–ª–æ, –±–µ—Ä–µ–º –≤—Å–µ
            
            for i, sample in enumerate(selected_defects):
                dst = negative_dir / f"defect_{defect_type}_{i:02d}.png"
                img = cv2.imread(str(sample))
                if img is not None:
                    cv2.imwrite(str(dst), img)
            
            print(f"   ‚úÖ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã: {len(selected_defects)} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–µ—Ñ–µ–∫—Ç–∞ '{defect_type}'")
        else:
            print(f"   ‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –¥–µ—Ñ–µ–∫—Ç–æ–º '{defect_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {wood_test_path}")
        
        return str(positive_dir), str(negative_dir)
    
    def process_sample(self, sample, output_dir):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"""
        
        image_path = sample["image_path"]
        gt_path = sample["gt_path"]
        defect_type = sample["defect_type"]
        sample_id = sample["sample_id"]
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è SearchDet
            positive_dir, negative_dir = self.create_positive_negative_examples(defect_type)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            results = self.detector.analyze_with_examples(
                str(image_path), 
                positive_dir, 
                negative_dir, 
                str(output_dir),
                str(gt_path)  # Ground truth –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º ground truth
            gt_mask = cv2.imread(str(gt_path), cv2.IMREAD_GRAYSCALE)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é –º–∞—Å–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SearchDet
            predicted_mask = self.create_prediction_mask(results, image_path)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = self.calculate_metrics(predicted_mask, gt_mask)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metrics.update({
                "sample_id": sample_id,
                "defect_type": defect_type,
                "image_path": str(image_path),
                "searchdet_detections": len(results.get("stages", {}).get("searchdet_analysis", {}).get("result", {}).get("missing_elements", [])),
                "processing_time": sum(stage.get("duration", 0) for stage in results.get("stages", {}).values())
            })
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            self.cleanup_temp_files()
            
            return metrics, results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {sample_id}: {e}")
            return None, None
    
    def create_prediction_mask(self, results, image_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞—Å–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
        img = cv2.imread(str(image_path))
        h, w = img.shape[:2]
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–∞—Å–∫—É
        prediction_mask = np.zeros((h, w), dtype=np.uint8)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º SearchDet –¥–µ—Ç–µ–∫—Ü–∏–∏
        searchdet_elements = results.get("stages", {}).get("searchdet_analysis", {}).get("result", {}).get("missing_elements", [])
        
        for element in searchdet_elements:
            bbox = element.get("bbox", [])
            if len(bbox) == 4:
                # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x_min = int(bbox[0] * w)
                y_min = int(bbox[1] * h)
                x_max = int(bbox[2] * w)
                y_max = int(bbox[3] * h)
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞
                prediction_mask[y_min:y_max, x_min:x_max] = 255
        
        return prediction_mask
    
    def cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        import shutil
        temp_dir = Path("./temp_examples")
        if temp_dir.exists():
            shutil.rmtree(temp_dir)
    
    def run_validation(self, output_dir="./mvtec_validation", max_samples=None):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        print("üî¨ –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ê –î–ê–¢–ê–°–ï–¢–ï MVTec AD")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã
        samples = self.get_wood_test_samples()
        
        if max_samples:
            samples = samples[:max_samples]
            print(f"üìù –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {max_samples} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤
        defect_types = {}
        for sample in samples:
            defect_type = sample["defect_type"]
            if defect_type not in defect_types:
                defect_types[defect_type] = []
            defect_types[defect_type].append(sample)
        
        print(f"üìä –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤: {list(defect_types.keys())}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã
        all_metrics = []
        detailed_results = {}
        
        start_time = time.time()
        
        with tqdm(total=len(samples), desc="–í–∞–ª–∏–¥–∞—Ü–∏—è") as pbar:
            for sample in samples:
                metrics, results = self.process_sample(sample, output_path)
                
                if metrics:
                    all_metrics.append(metrics)
                    detailed_results[sample["sample_id"]] = {
                        "metrics": metrics,
                        "defect_type": sample["defect_type"]
                    }
                
                pbar.update(1)
                pbar.set_postfix({
                    'Defect': sample["defect_type"][:8],
                    'ID': sample["sample_id"]
                })
        
        total_time = time.time() - start_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results = {
            "metrics": all_metrics,
            "detailed_results": detailed_results,
            "summary": self.calculate_summary_metrics(all_metrics, defect_types),
            "validation_info": {
                "total_samples": len(samples),
                "processed_samples": len(all_metrics),
                "total_time": total_time,
                "avg_time_per_sample": total_time / len(all_metrics) if all_metrics else 0
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        results_file = output_path / "validation_results.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self.create_validation_report(output_path)
        
        print(f"\nüéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        
        return self.results
    
    def calculate_summary_metrics(self, all_metrics, defect_types):
        """–†–∞—Å—á–µ—Ç —Å–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        
        if not all_metrics:
            return {}
        
        df = pd.DataFrame(all_metrics)
        
        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        overall = {
            "mean_dice": df["dice"].mean(),
            "mean_iou": df["iou"].mean(),
            "mean_f1": df["f1"].mean(),
            "mean_precision": df["precision"].mean(),
            "mean_recall": df["recall"].mean(),
            "mean_pixel_accuracy": df["pixel_accuracy"].mean(),
            "std_dice": df["dice"].std(),
            "std_iou": df["iou"].std()
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if "original_dice" in df.columns and "dice_improvement" in df.columns:
            overall.update({
                "mean_original_dice": df["original_dice"].mean(),
                "mean_dice_improvement": df["dice_improvement"].mean(),
                "mean_original_precision": df["original_precision"].mean(),
                "mean_original_recall": df["original_recall"].mean(),
                "std_dice_improvement": df["dice_improvement"].std(),
                "samples_improved": (df["dice_improvement"] > 0).sum(),
                "improvement_rate": (df["dice_improvement"] > 0).mean()
            })
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤
        by_defect_type = {}
        for defect_type in defect_types.keys():
            defect_metrics = df[df["defect_type"] == defect_type]
            if len(defect_metrics) > 0:
                by_defect_type[defect_type] = {
                    "count": len(defect_metrics),
                    "mean_dice": defect_metrics["dice"].mean(),
                    "mean_iou": defect_metrics["iou"].mean(),
                    "mean_f1": defect_metrics["f1"].mean(),
                    "mean_precision": defect_metrics["precision"].mean(),
                    "mean_recall": defect_metrics["recall"].mean()
                }
        
        return {
            "overall": overall,
            "by_defect_type": by_defect_type
        }
    
    def create_validation_report(self, output_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        summary = self.results["summary"]
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_file = output_path / "validation_report.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("üî¨ –û–¢–ß–ï–¢ –ü–û –í–ê–õ–ò–î–ê–¶–ò–ò MVTec AD (WOOD)\n")
            f.write("=" * 50 + "\n\n")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if not summary or "overall" not in summary:
                f.write("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê\n")
                f.write("   –ü—Ä–∏—á–∏–Ω–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n")
                f.write("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n")
                f.write("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ –¥–∞—Ç–∞—Å–µ—Ç—É\n")
                f.write("   - –ù–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ wood/test/ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤\n")
                f.write("   - –ù–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ wood/ground_truth/ —Å –º–∞—Å–∫–∞–º–∏\n\n")
                
                val_info = self.results.get("validation_info", {})
                f.write(f"‚è±Ô∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ü–´–¢–ö–ï –í–ê–õ–ò–î–ê–¶–ò–ò:\n")
                f.write(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {val_info.get('total_samples', 0)}\n")
                f.write(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {val_info.get('processed_samples', 0)}\n")
                f.write(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {val_info.get('total_time', 0):.2f} —Å–µ–∫\n")
                
                print(f"üìÑ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
                return
            
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            overall = summary["overall"]
            f.write("üìä –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò (—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –º–∞—Å–æ–∫):\n")
            f.write(f"   Dice Score: {overall['mean_dice']:.3f} ¬± {overall['std_dice']:.3f}\n")
            f.write(f"   IoU: {overall['mean_iou']:.3f} ¬± {overall['std_iou']:.3f}\n")
            f.write(f"   F1-Score: {overall['mean_f1']:.3f}\n")
            f.write(f"   Precision: {overall['mean_precision']:.3f}\n")
            f.write(f"   Recall: {overall['mean_recall']:.3f}\n")
            f.write(f"   Pixel Accuracy: {overall['mean_pixel_accuracy']:.3f}\n")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            if 'mean_dice_improvement' in overall:
                f.write(f"\nüîß –£–õ–£–ß–®–ï–ù–ò–Ø –û–¢ –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:\n")
                f.write(f"   –£–ª—É—á—à–µ–Ω–∏–µ Dice Score: +{overall['mean_dice_improvement']:.3f}\n")
                f.write(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Dice: {overall['mean_original_dice']:.3f}\n")
                f.write(f"   –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Dice: {overall['mean_dice']:.3f}\n")
                f.write(f"   –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {(overall['mean_dice_improvement']/overall['mean_original_dice']*100):.1f}%\n")
            f.write("\n")
            
            # –ü–æ —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤
            f.write("üìù –ú–ï–¢–†–ò–ö–ò –ü–û –¢–ò–ü–ê–ú –î–ï–§–ï–ö–¢–û–í:\n")
            by_defect_type = summary.get("by_defect_type", {})
            if by_defect_type:
                for defect_type, metrics in by_defect_type.items():
                    f.write(f"\n   {defect_type.upper()} ({metrics['count']} –æ–±—Ä–∞–∑—Ü–æ–≤):\n")
                    f.write(f"      Dice: {metrics['mean_dice']:.3f}\n")
                    f.write(f"      IoU: {metrics['mean_iou']:.3f}\n")
                    f.write(f"      F1: {metrics['mean_f1']:.3f}\n")
                    f.write(f"      Precision: {metrics['mean_precision']:.3f}\n")
                    f.write(f"      Recall: {metrics['mean_recall']:.3f}\n")
            else:
                f.write("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤\n")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            val_info = self.results["validation_info"]
            f.write(f"\n‚è±Ô∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–õ–ò–î–ê–¶–ò–ò:\n")
            f.write(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {val_info['total_samples']}\n")
            f.write(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {val_info['processed_samples']}\n")
            f.write(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {val_info['total_time']:.2f} —Å–µ–∫\n")
            f.write(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü: {val_info['avg_time_per_sample']:.2f} —Å–µ–∫\n")
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if summary and "overall" in summary and len(self.results["metrics"]) > 0:
            try:
                self.create_validation_plots(output_path)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏: {e}")
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    
    def create_validation_plots(self, output_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        df = pd.DataFrame(self.results["metrics"])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        plt.style.use('seaborn-v0_8' if 'seaborn-v0_8' in plt.style.available else 'default')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))
        
        metrics_to_plot = ["dice", "iou", "f1", "precision", "recall", "pixel_accuracy"]
        
        for i, metric in enumerate(metrics_to_plot):
            row, col = i // 3, i % 3
            axes[row, col].hist(df[metric], bins=20, alpha=0.7, edgecolor='black')
            axes[row, col].set_title(f'{metric.upper()} Distribution')
            axes[row, col].set_xlabel(metric.upper())
            axes[row, col].set_ylabel('Frequency')
            axes[row, col].axvline(df[metric].mean(), color='red', linestyle='--', 
                                 label=f'Mean: {df[metric].mean():.3f}')
            axes[row, col].legend()
        
        plt.tight_layout()
        plt.savefig(output_path / "metrics_distribution.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤
        if len(df["defect_type"].unique()) > 1:
            fig, ax = plt.subplots(figsize=(12, 6))
            
            defect_types = df["defect_type"].unique()
            x_pos = np.arange(len(defect_types))
            
            dice_means = [df[df["defect_type"] == dt]["dice"].mean() for dt in defect_types]
            iou_means = [df[df["defect_type"] == dt]["iou"].mean() for dt in defect_types]
            
            width = 0.35
            ax.bar(x_pos - width/2, dice_means, width, label='Dice Score', alpha=0.8)
            ax.bar(x_pos + width/2, iou_means, width, label='IoU', alpha=0.8)
            
            ax.set_xlabel('Defect Type')
            ax.set_ylabel('Score')
            ax.set_title('Performance by Defect Type')
            ax.set_xticks(x_pos)
            ax.set_xticklabels(defect_types, rotation=45)
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig(output_path / "performance_by_defect_type.png", dpi=300, bbox_inches='tight')
            plt.close()
        
        print(f"üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    import argparse
    
    parser = argparse.ArgumentParser(description="–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ MVTec AD")
    parser.add_argument("--dataset-path", default=None, help="–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É (–µ—Å–ª–∏ —É–∂–µ —Å–∫–∞—á–∞–Ω)")
    parser.add_argument("--output", default="./mvtec_validation", help="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--max-samples", type=int, default=None, help="–ú–∞–∫—Å–∏–º—É–º –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--model", default="standard", choices=["detailed", "standard", "latest"], 
                       help="–¢–∏–ø –º–æ–¥–µ–ª–∏ LLaVA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: standard = 7B)")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = MVTecValidator(args.dataset_path)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not validator.dataset_path:
        dataset_path = validator.download_dataset()
        if not dataset_path:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ wood
    wood_path = validator.dataset_path / "wood"
    if not wood_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ wood –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {validator.dataset_path}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    validator.setup_detector(args.model)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    results = validator.run_validation(args.output, args.max_samples)
    
    if results:
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        summary = results.get("summary", {})
        if summary and "overall" in summary:
            overall = summary["overall"]
            print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"   üéØ Dice Score: {overall['mean_dice']:.3f}")
            print(f"   üéØ IoU: {overall['mean_iou']:.3f}")
            print(f"   üéØ F1-Score: {overall['mean_f1']:.3f}")
            print(f"   üéØ Precision: {overall['mean_precision']:.3f}")
            print(f"   üéØ Recall: {overall['mean_recall']:.3f}")
            print(f"   üéØ Pixel Accuracy: {overall['mean_pixel_accuracy']:.3f}")
        else:
            print(f"\n‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨:")
            val_info = results.get("validation_info", {})
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {val_info.get('total_samples', 0)}")
            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {val_info.get('processed_samples', 0)}")
            print(f"   ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º")


if __name__ == "__main__":
    main() 