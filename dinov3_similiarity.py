#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
dinov3_similarity.py
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–∞–±–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º DINOv3.

–ü–æ–¥–¥–µ—Ä–∂–∫–∞:
- ViT: vitb16 (vit_base_patch16_224), vitl16 (vit_large_patch16_224), vith14 (vit_huge_patch14_224)
  –ü—É–ª–∏–Ω–≥: CLS (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ mean –ø–æ –ø–∞—Ç—á–∞–º.
- ConvNeXt: convnext_base / small / tiny / large (GAP-–ø—É–ª–∏–Ω–≥).

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ transforms –∏–∑ timm (resolve_model_data_config + create_transform).
- –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ state_dict (–æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –≥–æ–ª–æ–≤, –ø—Ä–µ—Ñ–∏–∫—Å–∞ module., strict=False).
- –í–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–µ—Ä—ë–º –∏–∑ forward_head(..., pre_logits=True) ‚Üí (D,).
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–±–æ—Ä —Ü–µ–ª–µ–≤—ã—Ö –ø—É—Ç–µ–π: —Ñ–∞–π–ª—ã –≤ target-dir —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏ –±–µ–∑ --recursive.
"""

import os
import sys
import csv
import glob
import argparse
from typing import List, Tuple, Optional, Dict

import numpy as np
from PIL import Image, ImageOps

import torch
import torch.nn.functional as F

import timm
from timm.data import resolve_model_data_config, create_transform


# -------------------------
# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º
# -------------------------
VIT_BACKBONES: Dict[str, str] = {
    "vitb16": "vit_base_patch16_224",
    "vitl16": "vit_large_patch16_224",
    "vith14": "vit_huge_patch14_224",
}

CONVN_BACKBONES: Dict[str, str] = {
    "convnext_base":  "convnext_base",
    "convnext_small": "convnext_small",
    "convnext_tiny":  "convnext_tiny",
    "convnext_large": "convnext_large",
}

ALL_BACKBONES = sorted(list(VIT_BACKBONES.keys()) + list(CONVN_BACKBONES.keys()))


# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -------------------------
def load_pil(path: str) -> Optional[Image.Image]:
    try:
        img = Image.open(path).convert("RGB")
        img = ImageOps.exif_transpose(img)  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ø–æ EXIF
        return img
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å '{path}': {e}", file=sys.stderr)
        return None


def iter_image_paths(target_dir: Optional[str], target_globs: List[str], recursive: bool) -> List[str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏–∑ –ø–∞–ø–∫–∏ –∏/–∏–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤."""
    exts = ("*.jpg", "*.jpeg", "*.png", "*.bmp", "*.webp", "*.tif", "*.tiff")
    paths: List[str] = []

    if target_dir:
        # –ï—Å–ª–∏ –Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ: –∏—â–µ–º —Ñ–∞–π–ª—ã –ø—Ä—è–º–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        # –ï—Å–ª–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ: **/ext
        if recursive:
            for ext in exts:
                pat = os.path.join(target_dir, "**", ext)
                paths.extend(glob.glob(pat, recursive=True))
        else:
            for ext in exts:
                pat = os.path.join(target_dir, ext)
                paths.extend(glob.glob(pat, recursive=False))

    for g in target_globs:
        paths.extend(glob.glob(g, recursive=True))

    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    paths = sorted(list(dict.fromkeys(paths)))
    return paths


def cosine(a: np.ndarray, b: np.ndarray) -> float:
    return float(np.dot(a, b))


def _infer_vit_arch_from_state_dict(sd: dict) -> Optional[str]:
    """
    –ì—Ä—É–±—ã–π –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç ViT-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏ —Ä–∞–∑–º–µ—Ä—É –ø–∞—Ç—á–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timm-–∏–º—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–ª–∏ None.
    """
    dim = None
    patch = None
    if "cls_token" in sd:
        dim = sd["cls_token"].shape[-1]
    elif "pos_embed" in sd:
        dim = sd["pos_embed"].shape[-1]
    if "patch_embed.proj.weight" in sd:
        w = sd["patch_embed.proj.weight"]
        dim = w.shape[0]
        patch = w.shape[-1]

    if dim == 768 and (patch in (None, 16)):
        return "vit_base_patch16_224"
    if dim == 1024 and (patch in (None, 16)):
        return "vit_large_patch16_224"
    if dim == 1280 and (patch in (None, 14)):
        return "vit_huge_patch14_224"
    return None


# -------------------------
# –≠–Ω–∫–æ–¥–µ—Ä DINOv3
# -------------------------
class DinoV3Encoder:
    """
    timm-–º–æ–¥–µ–ª—å (num_classes=0), –∑–∞–≥—Ä—É–∑–∫–∞ DINOv3 pretrain, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã.
    –î–ª—è ViT –∏—Å–ø–æ–ª—å–∑—É–µ–º global_pool="token", –¥–ª—è ConvNeXt ‚Äî "avg".
    """

    def __init__(
        self,
        backbone: str,
        ckpt: Optional[str],
        device: str = "cuda",
        half: bool = False,
        pooling: str = "cls",  # –¥–ª—è ViT: 'cls' –∏–ª–∏ 'mean'
    ):
        self.device = torch.device(device if device == "cpu" or torch.cuda.is_available() else "cpu")
        self.half = bool(half)
        self.pooling = pooling.lower().strip()
        self.is_vit = backbone in VIT_BACKBONES

        if backbone in VIT_BACKBONES:
            self.img_arch = VIT_BACKBONES[backbone]
        elif backbone in CONVN_BACKBONES:
            self.img_arch = CONVN_BACKBONES[backbone]
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π backbone '{backbone}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {ALL_BACKBONES}")

        # –°–æ–∑–¥–∞—ë–º timm-–º–æ–¥–µ–ª—å –±–µ–∑ –≥–æ–ª–æ–≤—ã; –ø—É–ª ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        gp = "token" if self.is_vit else "avg"
        self.model = timm.create_model(self.img_arch, pretrained=False, num_classes=0, global_pool=gp)
        self.model.eval().to(self.device)
        if self.half:
            self.model.half()

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        self.data_cfg = resolve_model_data_config(self.model)
        self.tf = create_transform(**self.data_cfg, is_training=False)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–ø–æ–π–Ω—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if ckpt:
            self._smart_load(ckpt)

    def _smart_load(self, path: str):
        if not os.path.isfile(path):
            print(f"‚ö†Ô∏è –ß–µ–∫–ø–æ–π–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}", file=sys.stderr)
            return

        print(f"üîß Loading checkpoint: {path}")
        sd = torch.load(path, map_location="cpu")
        if isinstance(sd, dict):
            sd = sd.get("state_dict", sd.get("model", sd))

        # —á–∏—Å—Ç–∏–º –∫–ª—é—á–∏ (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–≤—ã –∏ training-–æ–±–≤—è–∑–∫—É)
        cleaned = {}
        drop_prefixes = [
            "head", "fc", "classifier", "pre_logits",
            "seg_head", "decode_head", "aux_head",
            "mask_head", "detr_head", "m2f_head", "linear_head",
            "teacher", "student",
        ]
        for k, v in sd.items():
            if k.startswith("module."):
                k = k[7:]
            if any(k.startswith(p) for p in drop_prefixes):
                continue
            cleaned[k] = v

        # –ï—Å–ª–∏ —ç—Ç–æ ViT –∏ –∞—Ä—Ö –Ω–µ —Å–æ–≤–ø–∞–ª–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
        if self.is_vit:
            inferred = _infer_vit_arch_from_state_dict(cleaned)
            if inferred and inferred != self.img_arch:
                print(f"‚ÑπÔ∏è Auto-detect: ckpt –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ '{inferred}', –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é –º–æ–¥–µ–ª—å‚Ä¶")
                self.img_arch = inferred
                gp = "token"  # –¥–ª—è ViT
                self.model = timm.create_model(self.img_arch, pretrained=False, num_classes=0, global_pool=gp)
                self.model.eval().to(self.device)
                if self.half:
                    self.model.half()
                self.data_cfg = resolve_model_data_config(self.model)
                self.tf = create_transform(**self.data_cfg, is_training=False)

        missing, unexpected = self.model.load_state_dict(cleaned, strict=False)
        if unexpected:
            print(f"   ‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã –∫–ª—é—á–∏ (unexpected): {len(unexpected)}")
        if missing:
            print(f"   ‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ (missing): {len(missing)}")
        print("   ‚úÖ –í–µ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (strict=False)")

    @torch.no_grad()
    def _prep(self, img: Image.Image) -> torch.Tensor:
        x = self.tf(img).unsqueeze(0)
        if self.half:
            x = x.half()
        return x.to(self.device)

    @torch.no_grad()
    def encode(self, img: Image.Image) -> np.ndarray:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç L2-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (D,).
        """
        x = self._prep(img)
        feats = self.model.forward_features(x)

        vec = None
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å: "pre-logits"
        if hasattr(self.model, "forward_head"):
            out = self.model.forward_head(feats, pre_logits=True)
            if out.ndim == 2:            # (B, D)
                vec = out[0]
            elif out.ndim == 3:          # (B, T, D) –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö ViT-–∫–æ–Ω—Ñ–∏–≥–æ–≤
                if self.pooling == "mean":
                    if out.shape[1] > 1:
                        vec = out[0, 1:].mean(dim=0)
                    else:
                        vec = out[0, 0]
                else:
                    vec = out[0, 0]

        # –§–æ–ª–±—ç–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if vec is None:
            t = feats["x"] if isinstance(feats, dict) and "x" in feats else feats
            if t.ndim == 3:              # (B, T, D) ViT
                if self.pooling == "mean":
                    vec = (t[0, 1:].mean(dim=0) if t.shape[1] > 1 else t[0, 0])
                else:
                    vec = t[0, 0]
            elif t.ndim == 4:            # (B, C, H, W) ConvNeXt
                vec = t.mean(dim=(2, 3))[0]
            else:                        # (B, D) –∏–ª–∏ –ø–ª–æ—Å–∫–æ–µ
                vec = t.flatten(1)[0]

        vec = F.normalize(vec.float(), dim=0).cpu().numpy().astype(np.float32)
        return vec


# -------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
# -------------------------
def main():
    p = argparse.ArgumentParser(
        description="DINOv3 image similarity (query vs targets).",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    p.add_argument("--backbone", required=True, choices=ALL_BACKBONES,
                   help="–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —ç–Ω–∫–æ–¥–µ—Ä–∞.")
    p.add_argument("--ckpt", required=True,
                   help="–ü—É—Ç—å –∫ –≤–µ—Å–∞–º DINOv3 (pretrain).")
    p.add_argument("--query", required=True,
                   help="–ü—É—Ç—å –∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (query).")
    p.add_argument("--target-dir", default=None,
                   help="–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
    p.add_argument("--targets", nargs="*", default=[],
                   help="–°–ø–∏—Å–æ–∫ glob-—à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤–º–µ—Å—Ç–æ target-dir).")
    p.add_argument("--recursive", action="store_true",
                   help="–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ target-dir.")
    p.add_argument("--pooling", default="cls", choices=["cls", "mean"],
                   help="–ü—É–ª–∏–Ω–≥ –¥–ª—è ViT: CLS –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–∞—Ç—á–∞–º.")
    p.add_argument("--device", default="cuda", choices=["cuda", "cpu"],
                   help="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    p.add_argument("--half", action="store_true",
                   help="FP16 (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).")
    p.add_argument("--topk", type=int, default=15,
                   help="–°–∫–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏—Ö –≤—ã–≤–µ—Å—Ç–∏.")
    p.add_argument("--save-csv", default=None,
                   help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV (–ø—É—Ç—å/—Ñ–∞–π–ª.csv).")

    args = p.parse_args()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–Ω–∫–æ–¥–µ—Ä–∞
    enc = DinoV3Encoder(
        backbone=args.backbone,
        ckpt=args.ckpt,
        device=args.device,
        half=args.half,
        pooling=args.pooling,
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º query
    query_img = load_pil(args.query)
    if query_img is None:
        sys.exit(1)
    q_vec = enc.encode(query_img)

    # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–ª–∏
    target_paths = iter_image_paths(args.target_dir, args.targets, args.recursive)
    if not target_paths:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    rows: List[Tuple[str, float]] = []
    vectors: List[np.ndarray] = []
    for pth in target_paths:
        img = load_pil(pth)
        if img is None:
            continue
        try:
            v = enc.encode(img)
            sim = cosine(q_vec, v)
            rows.append((pth, sim))
            vectors.append(v)
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {pth}: {e}", file=sys.stderr)

    # –°–∞–Ω–∏—Ç–∏-—á–µ–∫ –Ω–∞ ¬´–∫–æ–ª–ª–∞–ø—Å¬ª —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    if len(vectors) >= 4:
        sample = vectors[:min(16, len(vectors))]
        sims = []
        for i in range(len(sample) - 1):
            for j in range(i + 1, len(sample)):
                sims.append(float(np.dot(sample[i], sample[j])))
        if sims and np.mean(sims) > 0.85:
            print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ü–µ–ª–µ–π –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (mean cos ~{:.3f}). "
                  "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Å–∞‚Üî–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–æ–≤."
                  .format(np.mean(sims)))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–≤–æ–¥ top-k
    rows.sort(key=lambda x: x[1], reverse=True)
    k = min(args.topk, len(rows))
    print("\n=== TOP SIMILAR ===")
    for i in range(k):
        print(f"  {i+1:>2}.  {rows[i][1]:.4f}   {rows[i][0]}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV
    if args.save_csv:
        try:
            with open(args.save_csv, "w", newline="", encoding="utf-8") as f:
                w = csv.writer(f)
                w.writerow(["rank", "similarity", "path"])
                for i, (pth, sim) in enumerate(rows, start=1):
                    w.writerow([i, f"{sim:.6f}", pth])
            print(f"\nüíæ CSV: {args.save_csv}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV: {e}", file=sys.stderr)


if __name__ == "__main__":
    main()
