#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import subprocess
import shlex
import numpy as np
from pathlib import Path
import urllib.request


def _pip_install(requirement: str) -> bool:
    try:
        cmd = f"{sys.executable} -m pip install -U {requirement}"
        print(f"   ‚¨áÔ∏è pip: {cmd}")
        res = subprocess.run(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=False, text=True)
        print(res.stdout[-1000:])
        return res.returncode == 0
    except Exception as e:
        print(f"   ‚ö†Ô∏è pip –æ—à–∏–±–∫–∞: {e}")
        return False


def _ensure_ultralytics(auto_install: bool = True):
    try:
        from ultralytics import FastSAM
        return True
    except Exception as e:
        print(f"   ‚ÑπÔ∏è ultralytics –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        if not auto_install:
            return False
        ok = _pip_install("ultralytics>=8.1.0")
        if not ok:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ultralytics.")
            return False
        try:
            from ultralytics import FastSAM
            return True
        except Exception as e2:
            print(f"   ‚ùå –ò–º–ø–æ—Ä—Ç ultralytics –≤—Å—ë –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e2}")
            return False


def _load_fastsam_model(model_path: str | None):
    if not _ensure_ultralytics(auto_install=True):
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å ultralytics/FastSAM.")

    try:
        from ultralytics import FastSAM
    except Exception:
        from ultralytics.models.fastsam import FastSAM

    Path("models").mkdir(parents=True, exist_ok=True)

    if model_path and os.path.exists(model_path):
        print(f"   ‚úÖ FastSAM –≤–µ—Å–∞ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ: {model_path}")
        return FastSAM(model_path)

    for name in [model_path, "FastSAM-x.pt", "FastSAM-s.pt"]:
        if not name:
            continue
        try:
            print(f"   ‚¨áÔ∏è –ê–≤—Ç–æ–¥–æ–∫–∞—á–∫–∞ FastSAM: {name}")
            return FastSAM(name)
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {name} ‚Üí {e}")

    raise FileNotFoundError("–í–µ—Å–∞ FastSAM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Å–∫–∞—á–∞—Ç—å.")


class MaskGenerator:
    def __init__(self, detector):
        self.detector = detector
        self._fastsam_model = None
        self._sam_generator = None
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._preload_models()
    
    def _preload_models(self):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞"""
        print(f"üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {self.detector.mask_backend.upper()} –º–æ–¥–µ–ª–∏...")
        
        if self.detector.mask_backend == "fastsam":
            self._preload_fastsam()
        elif self.detector.mask_backend == "sam-hq":
            self._preload_sam_hq()
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥: {self.detector.mask_backend}")
    
    def _preload_fastsam(self):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç FastSAM –º–æ–¥–µ–ª—å"""
        import torch
        print("‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ FastSAM...")
        self._fastsam_model = _load_fastsam_model(getattr(self.detector, 'fastsam_model', None))
        self._fastsam_device = getattr(self.detector, 'fastsam_device', None) or ('cuda' if torch.cuda.is_available() else 'cpu')
        print(f"‚úÖ FastSAM –≥–æ—Ç–æ–≤ (device={self._fastsam_device})")
    
    def _preload_sam_hq(self):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç SAM-HQ –º–æ–¥–µ–ª—å"""
        print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SAM-HQ...")
        self._sam_generator = self._init_sam_hq()
        print("‚úÖ SAM-HQ –≥–æ—Ç–æ–≤")
    
    def _cleanup_gpu_memory(self):
        """–û—á–∏—â–∞–µ—Ç GPU –ø–∞–º—è—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"""
        try:
            import torch
            if torch.cuda.is_available():
                torch.cuda.empty_cache()
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
                torch.cuda.synchronize()
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
            pass
        
    def generate(self, image_np):
        print(f"üöÄ –≠–¢–ê–ü 1: {self.detector.mask_backend.upper()} –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å–æ–∫")
        
        if self.detector.mask_backend == "fastsam":
            return self._generate_fastsam_masks(image_np)
        elif self.detector.mask_backend == "sam-hq":
            return self._generate_sam_masks(image_np)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—ç–∫–µ–Ω–¥: {self.detector.mask_backend}")
    
    def _generate_fastsam_masks(self, image_np):
        import torch, cv2, time
        
        # –ú–æ–¥–µ–ª—å —É–∂–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ __init__
        if self._fastsam_model is None:
            raise RuntimeError("FastSAM –º–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        H0, W0 = image_np.shape[:2]
        run_img = image_np
        scale = 1.0
        sam_long_side = getattr(self.detector, 'sam_long_side', None)
        if sam_long_side and max(H0, W0) > sam_long_side:
            if H0 >= W0:
                scale = sam_long_side / float(H0)
            else:
                scale = sam_long_side / float(W0)
            run_img = cv2.resize(image_np, (int(W0 * scale), int(H0 * scale)), interpolation=cv2.INTER_LINEAR)
        h, w = run_img.shape[:2]
        
        imgsz = getattr(self.detector, 'fastsam_imgsz', 1024)
        conf = getattr(self.detector, 'fastsam_conf', 0.4)
        iou = getattr(self.detector, 'fastsam_iou', 0.9)
        retina = getattr(self.detector, 'fastsam_retina', True)
        
        print(f"   –Ω–∞ {w}x{h} (scale={scale:.3f}, imgsz={imgsz})")
        t_start = time.time()
        
        results = self._fastsam_model(
            source=run_img,
            imgsz=imgsz,
            conf=conf,
            iou=iou,
            device=self._fastsam_device,
            retina_masks=retina,
            verbose=False
        )
        t_gen = time.time() - t_start
        
        if not results:
            print("   ‚ö†Ô∏è FastSAM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return []
        r0 = results[0]
        if getattr(r0, 'masks', None) is None or getattr(r0.masks, 'data', None) is None:
            print("   ‚ö†Ô∏è FastSAM: –Ω–µ—Ç –º–∞—Å–æ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            return []
        
        mask_tensor = r0.masks.data
        try:
            masks_np = mask_tensor.cpu().numpy().astype(np.uint8)
        except Exception:
            masks_np = np.array(mask_tensor).astype(np.uint8)
        
        out = []
        for seg in masks_np:
            seg_u8 = (seg > 0).astype(np.uint8)
            if scale != 1.0:
                seg_u8 = cv2.resize(seg_u8, (W0, H0), interpolation=cv2.INTER_NEAREST)
            H, W = seg_u8.shape[:2]
            ys, xs = np.where(seg_u8 > 0)
            if ys.size and xs.size:
                x1, y1, x2, y2 = xs.min(), ys.min(), xs.max(), ys.max()
                bbox = [int(x1), int(y1), int(x2 - x1), int(y2 - y1)]
            else:
                bbox = [0, 0, 0, 0]
            out.append({
                'segmentation': (seg_u8 > 0),
                'bbox': bbox,
                'area': int((seg_u8 > 0).sum()),
                'stability_score': 1.0,
                'predicted_iou': 1.0,
                'crop_box': [0, 0, W, H],
            })
        print(f"üîç FastSAM —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(out)} –º–∞—Å–æ–∫ –∑–∞ {t_gen:.3f} —Å–µ–∫")
        print(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(out)} –º–∞—Å–æ–∫-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        # –û—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self._cleanup_gpu_memory()
        
        return out
    
    def _generate_sam_masks(self, image_np):
        import time
        import cv2
        import numpy as np
        
        # –ú–æ–¥–µ–ª—å —É–∂–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ __init__
        if self._sam_generator is None:
            raise RuntimeError("SAM-HQ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –±—ã–ª –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è SAM-HQ
        H0, W0 = image_np.shape[:2]
        run_img = image_np
        scale = 1.0
        sam_long_side = getattr(self.detector, 'sam_long_side', None)
        if sam_long_side and max(H0, W0) > sam_long_side:
            if H0 >= W0:
                scale = sam_long_side / float(H0)
            else:
                scale = sam_long_side / float(W0)
            run_img = cv2.resize(image_np, (int(W0 * scale), int(H0 * scale)), interpolation=cv2.INTER_LINEAR)
            print(f"   üîß –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {W0}x{H0} ‚Üí {run_img.shape[1]}x{run_img.shape[0]} (scale={scale:.3f})")
        
        print(f"   –Ω–∞ {run_img.shape[1]}x{run_img.shape[0]}")
        
        t_start = time.time()
        
        masks = self._sam_generator.generate(run_img)
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–æ, –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å–∫–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        if scale != 1.0:
            print(f"   üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å–æ–∫ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É {W0}x{H0}...")
            for mask in masks:
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ
                seg = mask['segmentation']
                seg_resized = cv2.resize(seg.astype(np.uint8), (W0, H0), interpolation=cv2.INTER_NEAREST)
                mask['segmentation'] = seg_resized.astype(bool)
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º bbox –∏ area –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                ys, xs = np.where(seg_resized)
                if ys.size and xs.size:
                    x1, y1, x2, y2 = xs.min(), ys.min(), xs.max(), ys.max()
                    mask['bbox'] = [int(x1), int(y1), int(x2 - x1), int(y2 - y1)]
                    mask['area'] = int(seg_resized.sum())
                else:
                    mask['bbox'] = [0, 0, 0, 0]
                    mask['area'] = 0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º crop_box
                mask['crop_box'] = [0, 0, W0, H0]
        
        t_gen = time.time() - t_start
        
        print(f"üîç SAM-HQ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(masks)} –º–∞—Å–æ–∫ –∑–∞ {t_gen:.3f} —Å–µ–∫")
        print(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(masks)} –º–∞—Å–æ–∫-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        # –û—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self._cleanup_gpu_memory()
        
        return masks
    
    def _init_sam_hq(self):
        try:
            from segment_anything_hq import sam_model_registry, SamAutomaticMaskGenerator
        except ImportError:
            try:
                from segment_anything import sam_model_registry, SamAutomaticMaskGenerator
                print("   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é SAM –≤–º–µ—Å—Ç–æ SAM-HQ")
            except ImportError:
                raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ SAM-HQ, –Ω–∏ –æ–±—ã—á–Ω–∞—è SAM. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ segment-anything-hq –∏–ª–∏ segment-anything")
        
        sam_checkpoint = getattr(self.detector, 'sam_model', None)
        if not sam_checkpoint:
            sam_checkpoint = self._find_sam_checkpoint()
        
        if not sam_checkpoint:
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω checkpoint SAM-HQ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --backend fastsam –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SAM-HQ")
        
        print(f"   üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º SAM –∏–∑: {sam_checkpoint}")
        
        import torch
        device = "cuda" if torch.cuda.is_available() else "cpu"
        model_type = getattr(self.detector, 'sam_encoder', 'vit_l') or 'vit_l'
        
        sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)
        sam.to(device=device)
        
        mask_generator = SamAutomaticMaskGenerator(
            model=sam,
            points_per_side=32,
            points_per_batch=64,
            pred_iou_thresh=0.8,
            stability_score_thresh=0.9,
            crop_n_layers=1,
            crop_n_points_downscale_factor=2,
            min_mask_region_area=100,
            box_nms_thresh=0.5,
            crop_nms_thresh=0.5,
            crop_overlap_ratio=512 / 1500,
        )
        
        print(f"   ‚úÖ SAM-HQ –≥–æ—Ç–æ–≤ (device={device})")
        return mask_generator
    
    def _find_sam_checkpoint(self):
        import os
        from pathlib import Path
        
        model_type = getattr(self.detector, 'sam_encoder', 'vit_l')
        
        possible_paths = [
            f"sam-hq/pretrained_checkpoint/sam_hq_{model_type}.pth",
            f"models/sam_hq_{model_type}.pth", 
            f"sam_hq_{model_type}.pth",
        ]
        
        if not hasattr(self.detector, 'sam_encoder'):
            possible_paths.extend([
                "sam-hq/pretrained_checkpoint/sam_hq_vit_l.pth",
                "models/sam_hq_vit_l.pth", 
                "sam_hq_vit_l.pth",
                "sam-hq/pretrained_checkpoint/sam_hq_vit_h.pth",
                "models/sam_hq_vit_h.pth", 
                "sam_hq_vit_h.pth",
                "sam-hq/pretrained_checkpoint/sam_hq_vit_b.pth",
                "models/sam_hq_vit_b.pth", 
                "sam_hq_vit_b.pth",
                "models/sam_vit_l_0b3195.pth",
                "sam_vit_l_0b3195.pth"
            ])
        
        for path in possible_paths:
            if os.path.exists(path) and os.path.getsize(path) > 100_000_000:
                print(f"‚úÖ SAM-HQ –º–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
                return path
        
        return self._download_sam_hq()
    
    def _download_sam_hq(self):
        import urllib.request
        from pathlib import Path
        
        model_type = getattr(self.detector, 'sam_encoder', 'vit_l')
        
        sam_dir = Path("sam-hq/pretrained_checkpoint")
        sam_checkpoint = sam_dir / f"sam_hq_{model_type}.pth"
        
        if sam_checkpoint.exists() and sam_checkpoint.stat().st_size > 100_000_000:
            return str(sam_checkpoint)
        
        print(f"   üì• SAM-HQ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–∫–∞—á–∏–≤–∞–µ–º {model_type}...")
        sam_dir.mkdir(parents=True, exist_ok=True)
        
        urls = {
            'vit_b': "https://huggingface.co/lkeab/hq-sam/resolve/main/sam_hq_vit_b.pth",
            'vit_l': "https://huggingface.co/lkeab/hq-sam/resolve/main/sam_hq_vit_l.pth", 
            'vit_h': "https://huggingface.co/lkeab/hq-sam/resolve/main/sam_hq_vit_h.pth"
        }
        
        if model_type not in urls:
            print(f"   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: {model_type}")
            return None
            
        url = urls[model_type]
        print(f"üîÑ –°–∫–∞—á–∏–≤–∞–µ–º SAM-HQ –º–æ–¥–µ–ª—å –∏–∑ {url}")
        
        expected_sizes = {'vit_b': 375_000_000, 'vit_l': 1_200_000_000, 'vit_h': 2_400_000_000}
        print(f"‚ö†Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç (~{expected_sizes[model_type]/1_000_000_000:.1f}GB)...")
        
        try:
            def progress_hook(block_num, block_size, total_size):
                if total_size > 0:
                    percent = min(100.0, (block_num * block_size / total_size) * 100)
                    print(f"\rüì• –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent:.1f}%", end='', flush=True)
            
            urllib.request.urlretrieve(url, sam_checkpoint, reporthook=progress_hook)
            print()
            
            if sam_checkpoint.stat().st_size > expected_sizes[model_type] * 0.8:
                print(f"   ‚úÖ SAM-HQ –º–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞: {sam_checkpoint}")
                return str(sam_checkpoint)
            else:
                print("   ‚ùå –§–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é")
                sam_checkpoint.unlink()
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        
        return None
