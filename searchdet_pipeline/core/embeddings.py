# embeddings.py

import numpy as np
from PIL import Image
import cv2
import torch

class EmbeddingExtractor:
    def __init__(self, detector):
        self.detector = detector
        # –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –≤—Å—ë –≤–æ–∑—å–º—ë–º –∏–∑ detector.dinov3_encoder

    # ---------- –ù–ê–î–Å–ñ–ù–û–ï –ö–û–î–ò–†–û–í–ê–ù–ò–ï ROI –ú–ê–°–ö–ò –ß–ï–†–ï–ó DINOv3 ----------
    def _encode_mask_roi_with_dinov3(self, image_np: np.ndarray, mask_bool: np.ndarray) -> np.ndarray:
        """
        1) –±–µ—Ä—ë–º bbox –º–∞—Å–∫–∏,
        2) –≤—ã—Ä–µ–∑–∞–µ–º crop,
        3) –∑–∞–Ω—É–ª—è–µ–º —Ñ–æ–Ω (–ø–æ –º–∞—Å–∫–µ),
        4) –ø–æ–¥–∞—ë–º –≤ DINOv3-—ç–Ω–∫–æ–¥–µ—Ä,
        5) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º L2-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä (float32).
        """
        enc = getattr(self.detector, "dinov3_encoder", None)
        if enc is None:
            # safety: –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä (–Ω–æ –ª—É—á—à–µ –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å —ç–Ω–∫–æ–¥–µ—Ä)
            return np.zeros(1024, dtype=np.float32)

        ys, xs = np.where(mask_bool)
        if ys.size == 0 or xs.size == 0:
            return np.zeros(enc.output_dim, dtype=np.float32)  # fallback

        y1, y2 = int(ys.min()), int(ys.max())
        x1, x2 = int(xs.min()), int(xs.max())

        crop = image_np[y1:y2+1, x1:x2+1].copy()
        m    = mask_bool[y1:y2+1, x1:x2+1]
        # –∑–∞–Ω—É–ª—è–µ–º —Ñ–æ–Ω
        if m.dtype != bool:
            m = m.astype(bool)
        crop[~m] = 0

        pil = Image.fromarray(crop)
        vec = enc.encode(pil)  # —É–∂–µ float32 + L2 norm –≤–Ω—É—Ç—Ä–∏ —ç–Ω–∫–æ–¥–µ—Ä–∞
        return vec

    # ---------- –ú–ê–°–ö–ò: –í–°–ï–ì–î–ê –ß–ï–†–ï–ó DINOv3 ----------
    def extract_mask_embeddings(self, image_np, masks):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
          - np.ndarray (N, D) float32, L2-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –º–∞—Å–æ–∫,
          - —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–∞–ª–∏–¥–Ω—ã—Ö –º–∞—Å–æ–∫ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ).
        """
        print("üß† –≠–¢–ê–ü 2: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –º–∞—Å–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        if not isinstance(masks, (list, tuple)) or len(masks) == 0:
            print("   ‚ùå –ù–µ—Ç –º–∞—Å–æ–∫ –Ω–∞ –≤—Ö–æ–¥–µ")
            return np.zeros((0, 1024), dtype=np.float32), []

        enc = getattr(self.detector, "dinov3_encoder", None)
        if enc is None:
            print("   ‚ùå DINOv3-—ç–Ω–∫–æ–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ detector")
            return np.zeros((0, 1024), dtype=np.float32), []

        vecs = []
        valid_ids = []
        for i, md in enumerate(masks):
            m = md.get("segmentation", None)
            if m is None or not isinstance(m, np.ndarray):
                continue
            try:
                v = self._encode_mask_roi_with_dinov3(image_np, m.astype(bool))
                if v is not None and v.size > 0:
                    vecs.append(v.astype(np.float32, copy=False))
                    valid_ids.append(i)
            except Exception as e:
                print(f"   ‚ö†Ô∏è –ú–∞—Å–∫–∞ {i}: –æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ DINOv3: {e}")

        if not vecs:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –º–∞—Å–æ–∫.")
            return np.zeros((0, 1024), dtype=np.float32), []

        X = np.stack(vecs, axis=0).astype(np.float32, copy=False)
        # sanity: –≤–µ–∫—Ç–æ—Ä—ã —É–∂–µ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç–Ω–∫–æ–¥–µ—Ä–µ
        print(f"   üìä –ú–∞—Å–æ–∫ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –≤–µ–∫—Ç–æ—Ä–∞–º–∏: {X.shape[0]}")
        return X, valid_ids

    # ---------- –ü–†–ò–ú–ï–†–´: –í–°–ï–ì–î–ê –ß–ï–†–ï–ó DINOv3 ----------
    def build_queries_multiclass(self, pos_by_class, neg_imgs):
        """
        –°—Ç—Ä–æ–∏—Ç —Å–ª–æ–≤–∞—Ä—å: {–∫–ª–∞—Å—Å: np.ndarray (Kc, D)} –∏ q_neg: (M, D)
        –í—Å–µ –≤–µ–∫—Ç–æ—Ä—ã ‚Äî L2-–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ float32.
        """
        enc = getattr(self.detector, "dinov3_encoder", None)
        if enc is None:
            print("   ‚ùå DINOv3-—ç–Ω–∫–æ–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ detector")
            # –ø—É—Å—Ç—ã–µ, —á—Ç–æ–±—ã —Å–∫–æ—Ä–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
            return {}, np.zeros((0, 1024), dtype=np.float32)

        class_pos = {}
        total_pos = 0

        for cls_name, img_list in (pos_by_class or {}).items():
            cls_vecs = []
            for i, pil_img in enumerate(img_list or []):
                try:
                    v = enc.encode(pil_img)  # float32, L2
                    if v is not None and v.size > 0:
                        cls_vecs.append(v.astype(np.float32, copy=False))
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ö–ª–∞—Å—Å '{cls_name}', –ø—Ä–∏–º–µ—Ä {i}: {e}")
            if cls_vecs:
                Q = np.stack(cls_vecs, axis=0).astype(np.float32, copy=False)
            else:
                Q = np.zeros((0, enc.output_dim), dtype=np.float32)
            class_pos[cls_name] = Q
            total_pos += Q.shape[0]
            print(f"   üìä –ö–ª–∞—Å—Å '{cls_name}': {Q.shape[0]} –ø—Ä–∏–º–µ—Ä–æ–≤")

        # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã; –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (0, D), –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –≤—ã—á–∏—Ç–∞–Ω–∏—è—Ö
        neg_vecs = []
        for i, pil_img in enumerate(neg_imgs or []):
            try:
                v = enc.encode(pil_img)
                if v is not None and v.size > 0:
                    neg_vecs.append(v.astype(np.float32, copy=False))
            except Exception as e:
                print(f"   ‚ö†Ô∏è Negative –ø—Ä–∏–º–µ—Ä {i}: {e}")
        q_neg = np.stack(neg_vecs, axis=0).astype(np.float32, copy=False) if neg_vecs else \
                np.zeros((0, enc.output_dim), dtype=np.float32)

        print(f"   üìä Negative –≤—Å–µ–≥–æ: {q_neg.shape[0]}")
        return class_pos, q_neg
