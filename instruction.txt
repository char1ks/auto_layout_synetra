–ü–æ–Ω—è–ª. –£ —Ç–µ–±—è ¬´—Ä–∞–∑—ä–µ—Ö–∞–ª–∏—Å—å¬ª –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è DINOv3: –º–∞—Å–∫–∏ –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –æ–¥–Ω–∏–º –±—ç–∫–µ–Ω–¥–æ–º (–Ω–µ DINOv2), –∞ positive/negative-–ø—Ä–∏–º–µ—Ä—ã ‚Äî –¥—Ä—É–≥–∏–º (DINOv2 –∏–ª–∏ SearchDet). –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ –∫–æ—Å–∏–Ω—É—Å—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –∏ ¬´–Ω–µ –≤–∏–¥—è—Ç¬ª negative. –ù–∏–∂–µ ‚Äî —Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ (—Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–æ–∫) —á—Ç–æ–±—ã:

* –¥–æ–±–∞–≤–∏—Ç—å –±—ç–∫–µ–Ω–¥ **`dinov3_convnext_base`** –∏ –ø—É—Ç—å –∫ ckpt,
* –∏–∑–≤–ª–µ–∫–∞—Ç—å **–º–∞—Å–æ—á–Ω—ã–µ** —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ **ConvNeXt-B (DINOv3)** —Å masked pooling –ø–æ —Ñ–∏—á-–∫–∞—Ä—Ç–µ,
* —Å—Ç—Ä–æ–∏—Ç—å **positive/negative** –∑–∞–ø—Ä–æ—Å—ã **–≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ DINOv3**, –∞ –Ω–µ –≤ DINOv2/ResNet.

–°–¥–µ–ª–∞–π –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è **—Ç–æ—á–Ω–æ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ**.

---

# 1) `main.py`

### 1.1 –î–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –±—ç–∫–µ–Ω–¥–æ–≤ DINOv3

**–°—Ç—Ä–æ–∫–∞ 147 ‚Äî –ó–ê–ú–ï–ù–ò:**

```python
parser.add_argument('--backbone', choices=['resnet101','dinov2_s','dinov2_b','dinov2_l','dinov2_g'],
```

**–ù–ê:**

```python
parser.add_argument('--backbone', choices=['resnet101','dinov2_s','dinov2_b','dinov2_l','dinov2_g','dinov3_convnext_base'],
```

### 1.2 –ù–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –ø—É—Ç—å –∫ –≤–µ—Å–∞–º DINOv3 ConvNeXt-B

**–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 150 (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ `--feat-short-side`) –í–°–¢–ê–í–¨:**

```python
parser.add_argument('--dinov3-ckpt', help='–ü—É—Ç—å –∫ DINOv3 ConvNeXt-B .pth (–Ω–∞–ø—Ä–∏–º–µ—Ä, dinov3/dinov3_convnext_base_pretrain_lvd1689m-801f2ba9.pth)')
```

### 1.3 –ü—Ä–æ–∫–∏–Ω—å —ç—Ç–æ—Ç –ø—É—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞

**–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 364 –í–°–¢–ê–í–¨:**

```python
if hasattr(args, 'dinov3_ckpt') and args.dinov3_ckpt:
    detector_params['dinov3_ckpt'] = args.dinov3_ckpt
```

---

# 2) `detector.py`

### 2.1 –°–æ—Ö—Ä–∞–Ω–∏ –ø—É—Ç—å –∫ ckpt –≤ –æ–±—ä–µ–∫—Ç–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞

**–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 35 (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ `self.backbone = ...`) –í–°–¢–ê–í–¨:**

```python
self.dinov3_ckpt = self.params.get('dinov3_ckpt', None)
```

*(–æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ `detector.py` —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)*

---

# 3) `embeddings.py`

## 3.0 –ò–º–ø–æ—Ä—Ç os

**–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 11 (–ø–æ—Å–ª–µ `import torchvision.transforms as transforms`) –í–°–¢–ê–í–¨:**

```python
import os
```

## 3.1 –ü–æ–ª—è –¥–ª—è DINOv3 –≤ `__init__`

**–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 31 (–ø–æ—Å–ª–µ `self.dino_half_precision = ...`) –í–°–¢–ê–í–¨:**

```python
# === DINOv3 (ConvNeXt-B) ===
self._dinov3_model = None
self._dinov3_preprocess = None
self.dinov3_ckpt = getattr(detector, 'dinov3_ckpt', None)
```

## 3.2 –í–µ—Ç–∫–∞ DINOv3 –≤ –±—ã—Å—Ç—Ä–æ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –º–∞—Å–æ–∫

**–í —Ñ—É–Ω–∫—Ü–∏–∏ `def _extract_fast(self, image_np, mask_arrays):`**

**–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 107 –í–°–¢–ê–í–¨ –±–ª–æ–∫ `elif`:**

```python
elif self.backbone.startswith('dinov3'):
    return self._extract_with_dinov3_convnext(image_np, mask_arrays)
```

> –í –∏—Ç–æ–≥–µ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç:

```python
if self.backbone.startswith('dinov2'):
    return self._extract_with_dino(image_np, mask_arrays)
elif self.backbone.startswith('dinov3'):
    return self._extract_with_dinov3_convnext(image_np, mask_arrays)
# –¥–∞–ª—å—à–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —á–µ—Ä–µ–∑ SearchDet
```

## 3.3 DINOv3-–≤–µ—Ç–∫–∞ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (multiclass)

**–í `def build_queries_multiclass(self, pos_by_class, neg_imgs):`**

**–°—Ç—Ä–æ–∫–∞ 675 ‚Äî –ø–µ—Ä–µ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º `if str(self.backbone).startswith('dinov2'):` –í–°–¢–ê–í–¨ –Ω–æ–≤—ã–π —Ä–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è DINOv3:**

```python
if str(self.backbone).startswith('dinov3'):
    self._ensure_dinov3_convnext()
    D = 1024  # –≤—ã—Ö–æ–¥ ConvNeXt-B (pooled) ‚Äî 1024

    # NEGATIVE
    neg_list = []
    for i, img in enumerate(neg_imgs or []):
        try:
            v = self._get_dinov3_global(np.array(img))
            v = np.asarray(v, dtype=np.float32).reshape(-1)
            v /= (np.linalg.norm(v) + 1e-8)
            neg_list.append(v.copy())
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å negative {i}: {e}")
    q_neg = np.stack(neg_list, axis=0) if neg_list else np.zeros((0, D), dtype=np.float32)

    # POSITIVE –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_pos = {}
    if pos_by_class is None:
        pos_by_class = {}
    for cls, imgs in (pos_by_class or {}).items():
        vecs = []
        for i, img in enumerate(imgs or []):
            try:
                v = self._get_dinov3_global(np.array(img))
                v = np.asarray(v, dtype=np.float32).reshape(-1)
                v /= (np.linalg.norm(v) + 1e-8)
                vecs.append(v.copy())
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å positive '{cls}' #{i}: {e}")
        Q = np.stack(vecs, axis=0) if vecs else np.zeros((0, D), dtype=np.float32)
        class_pos[cls] = Q.astype(np.float32)
        print(f"   üìä –ö–ª–∞—Å—Å '{cls}': {Q.shape[0]} –ø—Ä–∏–º–µ—Ä–æ–≤")

    print(f"   üìä Negative –≤—Å–µ–≥–æ: {q_neg.shape[0]}")
    return class_pos, q_neg.astype(np.float32)
```

> –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ: —Ç–µ–ø–µ—Ä—å **–∏ –º–∞—Å–∫–∏, –∏ positive/negative** –±—É–¥—É—Ç –∏–∑ **–æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ** –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ConvNeXt-DINOv3.

## 3.4 –†–µ–∞–ª–∏–∑–∞—Ü–∏—è DINOv3 ConvNeXt-–ø—É—Ç–∏ (–¥–æ–±–∞–≤–∏—Ç—å –≤ –ö–û–ù–ï–¶ —Ñ–∞–π–ª–∞)

**–í —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü `embeddings.py` –¥–æ–±–∞–≤—å:**

```python
# ================================
# DINOv3 ConvNeXt-B (LVD-1689M)
# ================================
def _ensure_dinov3_convnext(self):
    if self._dinov3_model is not None:
        return
    try:
        import timm, torch
        from torchvision.transforms import InterpolationMode

        ckpt_path = self.dinov3_ckpt
        if not ckpt_path:
            raise FileNotFoundError("–ù–µ —É–∫–∞–∑–∞–Ω --dinov3-ckpt (–ø—É—Ç—å –∫ .pth –¥–ª—è ConvNeXt-B DINOv3)")

        # 1) ConvNeXt-B –±–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ -> –≤–µ—Ä–Ω—ë—Ç pooled —Ñ–∏—á–∏ –ø—Ä–∏ model(x)
        self._dinov3_model = timm.create_model('convnext_base', pretrained=False, num_classes=0)

        # 2) –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤
        sd = torch.load(ckpt_path, map_location='cpu')
        if isinstance(sd, dict) and 'model' in sd:
            sd = sd['model']
        missing, unexpected = self._dinov3_model.load_state_dict(sd, strict=False)
        if missing:   print(f"‚ö†Ô∏è DINOv3 missing keys: {len(missing)}")
        if unexpected:print(f"‚ö†Ô∏è DINOv3 unexpected keys: {len(unexpected)}")

        self._dinov3_model.eval()

        # 3) –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å
        img_size = int(os.getenv('SEARCHDET_FEAT_SHORT_SIDE', '224'))
        from torchvision import transforms as T
        self._dinov3_preprocess = T.Compose([
            T.Resize((img_size, img_size), interpolation=InterpolationMode.BICUBIC),
            T.ToTensor(),
            T.Normalize(mean=(0.485,0.456,0.406), std=(0.229,0.224,0.225)),
        ])
        print(f"‚úÖ DINOv3 ConvNeXt-B –≥–æ—Ç–æ–≤ (img_size={img_size})")
    except Exception as e:
        print(f"‚ùå DINOv3 ConvNeXt-B init error: {e}")
        self._dinov3_model = None
        self._dinov3_preprocess = None

def _extract_with_dinov3_convnext(self, image_np, mask_arrays):
    import torch, cv2, numpy as np
    self._ensure_dinov3_convnext()
    if self._dinov3_model is None or self._dinov3_preprocess is None:
        print("‚ö†Ô∏è DINOv3 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –≤–µ—Ä–Ω—É –ø—É—Å—Ç—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        return np.zeros((0, 1024), dtype=np.float32)

    # –ü—Ä–æ–≥–æ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑, –¥–æ—Å—Ç–∞–Ω–µ–º —Ñ–∏—á-–∫–∞—Ä—Ç—É
    x = self._dinov3_preprocess(Image.fromarray(image_np)).unsqueeze(0)
    with torch.no_grad():
        feats = self._dinov3_model.forward_features(x)

    embeddings = []
    # –í–µ—Ç–∫–∞ 1: –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏—á-–∫–∞—Ä—Ç–∞ (B,C,Hf,Wf) ‚Äî –¥–µ–ª–∞–µ–º masked pooling
    if hasattr(feats, 'shape') and getattr(feats, 'ndim', 0) == 4:
        fmap = feats[0]                      # (C, Hf, Wf) –∏–ª–∏ (B,C,Hf,Wf) -> –±–µ—Ä—ë–º [0]
        if fmap.ndim == 3:
            C, Hf, Wf = int(fmap.shape[0]), int(fmap.shape[1]), int(fmap.shape[2])
        else:
            C = feats.shape[1]; Hf = feats.shape[2]; Wf = feats.shape[3]
            fmap = feats[0]
        fmap = fmap.detach().cpu().float().numpy().transpose(1,2,0)  # (Hf, Wf, C)

        for mask in mask_arrays:
            # –ú–∞—Å–∫—É –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫ (Hf, Wf)
            m = cv2.resize(mask.astype(np.uint8), (Wf, Hf), interpolation=cv2.INTER_NEAREST).astype(bool)
            if not m.any():
                # –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è ‚Äî –≤–æ–∑—å–º—ë–º –Ω–∞–∏–±–æ–ª—å—à–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏–∫—Å–µ–ª—å –ø–æ—Å–ª–µ –ª–µ–≥–∫–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è
                m = np.zeros((Hf, Wf), dtype=bool); m[Hf//2, Wf//2] = True
            v = fmap[m].mean(axis=0) if m.any() else fmap.reshape(-1, C).mean(axis=0)
            v = v.astype(np.float32)
            v /= (np.linalg.norm(v) + 1e-8)
            # ConvNeXt-B –¥–∞—ë—Ç 1024-D, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–∞–¥–¥–∏–Ω–≥/–æ–±—Ä–µ–∑–∫–∞
            if v.shape[0] != 1024:
                out = np.zeros(1024, dtype=np.float32)
                take = min(1024, v.shape[0]); out[:take] = v[:take]; v = out
            embeddings.append(v)
    else:
        # –í–µ—Ç–∫–∞ 2: –Ω–µ—Ç spatial-–∫–∞—Ä—Ç—ã ‚Äî fallback: ROI-–∫—Ä–æ–ø –ø–æ bbox –º–∞—Å–∫–∏ + pooled
        from PIL import Image as PILImage
        H, W = image_np.shape[:2]
        for mask in mask_arrays:
            ys, xs = np.where(mask)
            if ys.size == 0 or xs.size == 0:
                embeddings.append(np.zeros(1024, dtype=np.float32)); continue
            y1,y2,x1,x2 = int(ys.min()), int(ys.max()+1), int(xs.min()), int(xs.max()+1)
            crop = image_np[y1:y2, x1:x2]
            x_crop = self._dinov3_preprocess(PILImage.fromarray(crop)).unsqueeze(0)
            with torch.no_grad():
                pooled = self._dinov3_model(x_crop).squeeze(0).cpu().float().numpy()
            v = pooled.astype(np.float32)
            v /= (np.linalg.norm(v) + 1e-8)
            if v.shape[0] != 1024:
                out = np.zeros(1024, dtype=np.float32)
                take = min(1024, v.shape[0]); out[:take] = v[:take]; v = out
            embeddings.append(v)

    return np.stack(embeddings, axis=0).astype(np.float32) if embeddings else np.zeros((0, 1024), dtype=np.float32)

def _get_dinov3_global(self, image_np: np.ndarray):
    import torch
    self._ensure_dinov3_convnext()
    if self._dinov3_model is None or self._dinov3_preprocess is None:
        return np.random.rand(1024).astype(np.float32)
    with torch.no_grad():
        x = self._dinov3_preprocess(Image.fromarray(image_np)).unsqueeze(0)
        vec = self._dinov3_model(x).squeeze(0).cpu().float().numpy()  # pooled 1024-D
    vec = vec.astype(np.float32)
    vec /= (np.linalg.norm(vec) + 1e-8)
    if vec.shape[0] != 1024:
        out = np.zeros(1024, dtype=np.float32)
        take = min(1024, vec.shape[0]); out[:take] = vec[:take]; vec = out
    return vec
```

---

## 4) –ö–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å (–ø—Ä–∏–º–µ—Ä)

```bash
python main.py detect \
  path/to/image.jpg \
  --positive path/to/pos_by_class_dir \
  --negative path/to/neg_dir \
  --backbone dinov3_convnext_base \
  --dinov3-ckpt dinov3/dinov3_convnext_base_pretrain_lvd1689m-801f2ba9.pth \
  --feat-short-side 384
```

---

## –ü–æ—á–µ–º—É —ç—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —Ç–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Å ¬´–æ–¥–∏–Ω-–≤-–æ–¥–∏–Ω –∫–∞–∫ negative, –Ω–æ —Å–∫–æ—Ä—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ¬ª

* **–ï–¥–∏–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:** —Ç–µ–ø–µ—Ä—å **–º–∞—Å–∫–∏** –∏ **positive/negative** —Å—á–∏—Ç–∞—é—Ç—Å—è **–æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –±—ç–∫–µ–Ω–¥–æ–º DINOv3 ConvNeXt-B**, –∞ –Ω–µ —Å–º–µ—Å—å—é DINOv2/ResNet. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç ¬´–≤—ã—Å–æ–∫–∏–µ¬ª –∫–æ—Å–∏–Ω—É—Å—ã –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤.
* **Masked pooling –Ω–∞ —Ñ–∏—á-–∫–∞—Ä—Ç–µ ConvNeXt:** –≤–º–µ—Å—Ç–æ ¬´—á—ë—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–∞¬ª –ø–æ –ø–∏–∫—Å–µ–ª—è–º –º—ã —É—Å—Ä–µ–¥–Ω—è–µ–º **—Ç–æ–ª—å–∫–æ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º –º–∞—Å–∫–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤**, —á—Ç–æ —Ä–µ–∑–∫–æ —Å–Ω–∏–∂–∞–µ—Ç –ª–æ–∂–Ω—ã–µ —Å—Ö–æ–¥—Å—Ç–≤–∞.
* **–û—Ç—Å–µ—á–∫–∞ –æ—à–∏–±–æ–∫:** –µ—Å–ª–∏ mask –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª–µ–Ω fallback; —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ 1024-D.

–ï—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–æ–∫ –≤—Å—ë –µ—â—ë —É–≤–∏–¥–∏—à—å —Å—Ç—Ä–∞–Ω–Ω–æ –Ω–∏–∑–∫–∏–µ `neg` –ø—Ä–∏ ¬´—Å–æ–≤–ø–∞–¥–∞—é—â–µ–º¬ª negative ‚Äî –ø—Ä–∏—à–ª–∏ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä `pos/neg` –∏ –æ–¥–∏–Ω –∫–∞–¥—Ä, —è —É–∫–∞–∂—É, –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è –ø–∞–π–ø–ª–∞–π–Ω (–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –∞–≥—Ä–µ–≥–∞—Ü–∏—è top-k –∏ —Ç.–ø.).
