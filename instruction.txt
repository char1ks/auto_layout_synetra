1) main.py
1.1. –†–∞–∑—Ä–µ—à–∏—Ç—å –±—ç–∫–µ–Ω–¥ dinov3_convnext_base

–§–∞–π–ª: main.py
–°—Ç—Ä–æ–∫–∞ 147 (–∞—Ä–≥—É–º–µ–Ω—Ç --backbone)

–ë–´–õ–û (—Å—Ç—Ä. 147):

parser.add_argument('--backbone', choices=['resnet101','dinov2_s','dinov2_b','dinov2_l','dinov2_g'],


–°–¢–ê–õ–û (—Å—Ç—Ä. 147):

parser.add_argument('--backbone', choices=['resnet101','dinov2_s','dinov2_b','dinov2_l','dinov2_g','dinov3_convnext_base'],

1.2. –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –≤–µ—Å–∞–º DINOv3 (ConvNeXt-B)

–§–∞–π–ª: main.py
–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 150 (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ --feat-short-side) –í–°–¢–ê–í–¨ –ù–û–í–£–Æ –°–¢–†–û–ö–£:

parser.add_argument('--dinov3-ckpt', help='–ü—É—Ç—å –∫ –≤–µ—Å–∞–º DINOv3 ConvNeXt-B (.pth)')

1.3. –ü—Ä–æ–∫–∏–Ω—É—Ç—å –ø—É—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞

–§–∞–π–ª: main.py
–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 363 (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –±–ª–æ–∫–∞, –≥–¥–µ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è detector_params['backbone'] = args.backbone) –í–°–¢–ê–í–¨ –ù–û–í–´–ï –°–¢–†–û–ö–ò:

if hasattr(args, 'dinov3_ckpt') and args.dinov3_ckpt:
    detector_params['dinov3_ckpt'] = args.dinov3_ckpt


–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ —Ä–µ–∂–∏–º–µ batch —É —Ç–µ–±—è –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ --backbone. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –¥–æ–±–∞–≤—å –µ–≥–æ –≤ _add_batch_arguments (—Å—Ç—Ä–æ–∫–∏ ~200‚Äì210) –∏ —Ç–∞–∫–∂–µ –ø—Ä–æ–∫–∏–Ω—å –≤ detector_params. –ù–æ –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ detect —à–∞–≥–æ–≤ –≤—ã—à–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.

2) detector.py
2.1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç—å –∫ DINOv3 ckpt –≤ –∞—Ç—Ä–∏–±—É—Ç–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞

–§–∞–π–ª: detector.py
–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 34 (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ self.backbone = ...) –í–°–¢–ê–í–¨ –ù–û–í–£–Æ –°–¢–†–û–ö–£:

self.dinov3_ckpt = self.params.get('dinov3_ckpt', None)


–ù–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –≤ detector.py –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.

3) embeddings.py

–î–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–≤–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞ dinov3_convnext_base: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConvNeXt-B, –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–æ–∏—Ö –≤–µ—Å–æ–≤, –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ –º–∞—Å–∫–∞–º (masked pooling —á–µ—Ä–µ–∑ –Ω—É–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞).

3.1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è DINOv3

–§–∞–π–ª: embeddings.py
–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 28 (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ self.dino_half_precision = ...) –í–°–¢–ê–í–¨ –¢–†–ò –ù–û–í–´–ï –°–¢–†–û–ö–ò:

self._dinov3_model = None
self._dinov3_preprocess = None
self.dinov3_ckpt = getattr(detector, 'dinov3_ckpt', None)

3.2. –í—Ä–µ–∑–∫–∞ —Ä–∞–Ω–Ω–µ–π –≤–µ—Ç–∫–∏ –¥–ª—è DINOv3 –≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –º–∞—Å–æ–∫

–§–∞–π–ª: embeddings.py
–ü–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π 66 (–ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º `print(f"üöÄ –ë–´–°–¢–†–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ...") ) –í–°–¢–ê–í–¨ –ë–õ–û–ö:

# === DINOv3 ConvNeXt-B: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ ===
if self.backbone.startswith('dinov3'):
    print(f"üöÄ DINOv3/ConvNeXt-B: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(mask_arrays)} –º–∞—Å–æ–∫")
    embs = self._extract_with_dinov3_convnext(image_np, mask_arrays)
    embs = np.asarray(embs, dtype=np.float32)
    if embs.ndim == 1:
        embs = embs.reshape(1, -1)
    elif embs.ndim > 2:
        embs = embs.reshape(embs.shape[0], -1)
    return embs.astype(np.float32), valid_indices

3.3. –í–æ–∑–≤—Ä–∞—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –æ–Ω –Ω—É–∂–µ–Ω)

–§–∞–π–ª: embeddings.py
–í —Ñ—É–Ω–∫—Ü–∏–∏ _get_image_embedding ‚Äî –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 353 (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ if self.backbone.startswith('dinov2'):) –î–û–ë–ê–í–¨ elif –í–ï–¢–ö–£:

elif self.backbone.startswith('dinov3'):
    return self._get_dinov3_global(np.array(pil_image))

3.4. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è DINOv3 ConvNeXt-B: ensure + extract + global

–§–∞–π–ª: embeddings.py
–í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ –∫–æ–Ω—Ü–∞) –í–°–¢–ê–í–¨ –°–õ–ï–î–£–Æ–©–ò–ô –ö–û–î:

# =========================
# DINOv3 ConvNeXt-B support
# =========================
def _ensure_dinov3_convnext(self):
    if self._dinov3_model is not None:
        return
    try:
        import timm
        import torchvision.transforms as T
        from torchvision.transforms import InterpolationMode

        # 1) –ú–æ–¥–µ–ª—å ConvNeXt-B –±–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (—ç–º–±–µ–¥–¥–∏–Ω–≥–∏)
        self._dinov3_model = timm.create_model('convnext_base', pretrained=False, num_classes=0)

        # 2) –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–æ–∏—Ö –≤–µ—Å–æ–≤ (.pth)
        ckpt_path = self.dinov3_ckpt
        if not ckpt_path:
            raise FileNotFoundError("–ù–µ —É–∫–∞–∑–∞–Ω --dinov3-ckpt (–ø—É—Ç—å –∫ .pth)")
        sd = torch.load(ckpt_path, map_location='cpu')
        if isinstance(sd, dict) and 'model' in sd:
            sd = sd['model']
        missing, unexpected = self._dinov3_model.load_state_dict(sd, strict=False)
        if len(missing) > 0:
            print(f"‚ö†Ô∏è DINOv3: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {len(missing)}")
        if len(unexpected) > 0:
            print(f"‚ö†Ô∏è DINOv3: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {len(unexpected)}")

        self._dinov3_model.eval()

        # 3) –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ImageNet; —Ä–∞–∑–º–µ—Ä –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        img_size = int(os.getenv('SEARCHDET_FEAT_SHORT_SIDE', '224'))
        self._dinov3_preprocess = T.Compose([
            T.Resize((img_size, img_size), interpolation=InterpolationMode.BICUBIC),
            T.ToTensor(),
            T.Normalize(mean=(0.485,0.456,0.406), std=(0.229,0.224,0.225)),
        ])
        print(f"‚úÖ DINOv3 ConvNeXt-B –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (img_size={img_size})")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DINOv3 ConvNeXt-B: {e}")
        self._dinov3_model = None
        self._dinov3_preprocess = None

def _extract_with_dinov3_convnext(self, image_np: np.ndarray, mask_arrays):
    import time
    self._ensure_dinov3_convnext()
    if self._dinov3_model is None or self._dinov3_preprocess is None:
        print("‚ö†Ô∏è DINOv3 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        return np.zeros((0, 1024), dtype=np.float32)

    # –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ñ–æ–Ω = 0, –æ–±—ä–µ–∫—Ç = –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
    H, W = image_np.shape[:2]
    embeddings = []
    t0 = time.time()
    with torch.no_grad():
        for i, mask in enumerate(mask_arrays):
            masked = np.zeros_like(image_np)
            masked[mask] = image_np[mask]
            x = self._dinov3_preprocess(Image.fromarray(masked)).unsqueeze(0)
            feats = self._dinov3_model(x)   # num_classes=0 -> pooled features
            emb = feats.squeeze(0).cpu().numpy()
            # L2-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            norm = np.linalg.norm(emb) + 1e-8
            emb = (emb / norm).astype(np.float32)
            embeddings.append(emb)
    print(f"‚ö° DINOv3: {len(mask_arrays)} –º–∞—Å–æ–∫ –∑–∞ {time.time()-t0:.3f}—Å")
    return np.stack(embeddings, axis=0) if embeddings else np.zeros((0, 1024), dtype=np.float32)

def _get_dinov3_global(self, image_np: np.ndarray):
    self._ensure_dinov3_convnext()
    if self._dinov3_model is None or self._dinov3_preprocess is None:
        return np.random.rand(1024).astype(np.float32)
    with torch.no_grad():
        x = self._dinov3_preprocess(Image.fromarray(image_np)).unsqueeze(0)
        feats = self._dinov3_model(x)   # [1,1024]
        emb = feats.squeeze(0).cpu().numpy()
        emb = (emb / (np.linalg.norm(emb) + 1e-8)).astype(np.float32)
        return emb


–í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç num_classes=0 –≤ timm.create_model('convnext_base', ...), –ø–æ—ç—Ç–æ–º—É model(x) —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç pooled —ç–º–±–µ–¥–¥–∏–Ω–≥ (ConvNeXt-B ‚Üí 1024-D). –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è L2 –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ retrieval/—Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ detect):

python main.py detect \
  path/to/image.jpg \
  --positive path/to/positive_dir \
  --negative path/to/negative_dir \
  --backbone dinov3_convnext_base \
  --dinov3-ckpt dinov3/dinov3_convnext_base_pretrain_lvd1689m-801f2ba9.pth \
  --feat-short-side 224


--feat-short-side –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å ConvNeXt –¥–ª—è DINOv3 –≤ —ç—Ç–æ–º –ø–∞—Ç—á–µ (—á–µ—Ä–µ–∑ SEARCHDET_FEAT_SHORT_SIDE). –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å 384 –¥–ª—è —á—É—Ç—å –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç VRAM.

–ö—Ä–∞—Ç–∫–æ, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

CLI —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç --backbone dinov3_convnext_base –∏ --dinov3-ckpt ...pth.

detector –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø—É—Ç—å –∫ –≤–µ—Å–∞–º DINOv3.

embeddings –∑–Ω–∞–µ—Ç –ø—Ä–æ –Ω–æ–≤—ã–π –±—ç–∫–µ–Ω–¥: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ConvNeXt-B, –≥—Ä—É–∑–∏—Ç —Ç–≤–æ–∏ –≤–µ—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –º–∞—Å–æ–∫ (masked pooling ‚Üí 1024D).

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –¥–∞—Ç—å –¥–æ–ø. –æ–ø—Ü–∏—é –±–∞—Ç—á-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è _extract_with_dinov3_convnext (—Å–∫–ª–µ–∏–≤–∞—Ç—å –º–∞—Å–∫–∏ –≤ –±–∞—Ç—á–∏) ‚Äî –Ω–æ –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —É–∂–µ —Ä–∞–±–æ—á–∞—è.